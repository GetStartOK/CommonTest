package test_main;

public class SuperPow {

    public int superPow(int a, int[] b) {
    	if(a == 1)
    		return 1;
    	a = a % 1337;
    	int pow = 0;
        StringBuilder sb = new StringBuilder();
    	for(int i = 0; i < b.length; i++)
    		sb.append(String.valueOf(b[i]));
    	int m = sb.length() / 9;
    	int n = sb.length() % 9;
    	int p[] = null;
    	if(n == 0){
    		p = new int[m];
    		for(int i = 0; i < m; i++){
    			p[i] = Integer.parseInt(sb.substring(sb.length() - 9 * (i + 1), sb.length() - 9 * i));
    		}
    	}else{
    		p =  new int[m + 1];
    		for(int i = 0; i < m; i++){
    			p[i] = Integer.parseInt(sb.substring(sb.length() - 9 * (i + 1), sb.length() - 9 * i));
    		}
    		p[m] = Integer.parseInt(sb.substring(0, sb.length() - 9 * m));
    	}
    	int rest = 1;
    	for(int j = 0; j < p.length; j++){
    		pow = p[j];
    		if(pow == 0)
    			continue;
            int tmp = getTmp(a, pow);
            
            for(int k = 0; k < j; k++){
            	pow = 1000000000;
            	tmp = getTmp(tmp, pow);
            }
            rest = (tmp * rest) % 1337;
    	}
    	return rest;
    }
    
    private int getTmp(int a, int b){
    	if(a == 1)
    		return 1;
        int i = 1;
        int tmp = 1;
        int t1 = Integer.MAX_VALUE / 1337;
        while(tmp < t1){
        	tmp *= a;
        	i ++;
        }
        i --;
        int m = b / i;
        int n = b % i;
        if(m > 0){
        	tmp = getTmp(tmp % 1337, m);
        }else{
        	tmp = 1;
        }
        i = 1;
    	while(i <= n){
	        tmp *= a;
	        i ++;
        }
    	return tmp % 1337;
    }
    
    public static void main(String[] args) {
    	int a = 209253;
    	int[] b = {3,6,4,3,0,7,9,2,9,7,8,7,7,0,3,8,6,0,0,8,0,8,3,4,4,4,9,9,6,7,3,3,6,7,8,6,4,8,8,3,7,9,2,4,1,5,4,9,7,4,8,8,4,3,4,8,9,6,0,6,3,3,1,1,2,1,8,8,1,8,3,8,9,5,4,0,3,9,0,0,5,0,0,0,5,5,0,7,1,0,5,6,5,6,8,9,9,8,7,1,6,0,9,6,8,6,8,1,5,0,3,0,0,4,0,8,1,1,5,2,3,0,0,9,8,8,8,7,6,8,8,5,8,0,3,8,6,3,1,3,4,5,3,6,1,6,4,2,9,9,6,2,1,6,1,9,7,2,7,5,0,7,0,0,9,5,9,7,9,2,0,3,9,4,1,0,0,6,4,9,7,2,3,9,9,5,8,8,9,7,3,9,7,4,9,6,1,0,6,0,3,6,5,4,2,7,5,2,3,1,3,0,4,9,1,5,6,0,3,5,9,6,4,6,2,5,5,4,8,1,4,3,7,2,7,0,9,4,4,4,6,0,6,2,9,8,7,5,0,0,0,9,8,6,6,1,3,1,5,3,2,1,6,1,3,6,1,4,2,6,0,8,8,9,2,7,7,9,4,7,1,4,8,0,2,4,3,5,7,0,1,9,1,7,1,7,5,4,3,8,2,6,8,0,5,1,9,2,2,3,1,6,9,9,8,1,6,1,9,3,1,0,5,4,9,8,3,5,4,7,5,7,3,3,9,8,6,9,2,9,2,5,5,2,6,3,5,2,6,6,8,7,6,5,3,8,5,7,5,9,6,0,8,9,5,8,9,2,7,3,3,1,0,0,5,6,5,3,1,1,9,1,0,6,6,3,6,3,2,1,2,8,1,1,9,8,1,0,2,0,3,5,1,3,7,9,2,2,2,3,3,1,4,3,9,2,9,5,5,1,6,9,0,9,2,9,0,3,0,2,5,5,0,9,1,7,8,3,0,2,8,3,5,4,9,7,6,8,2,3,9,1,4,1,2,9,3,2,4,5,5,0,0,7,9,3,4,9,6,4,1,6,0,8,0,9,5,8,9,0,3,0,1,8,2,5,9,7,0,3,2,7,3,2,4,4,8,8,3,4,3,6,3,3,5,3,4,0,2,5,0,7,5,3,5,9,9,6,6,1,0,8,8,5,3,2,0,1,0,3,7,5,2,0,0,7,4,6,7,8,1,0,5,7,5,3,6,4,9,5,7,1,3,5,7,6,7,9,9,0,4,7,5,6,9,6,3,5,2,3,5,4,5,1,3,0,6,1,7,7,6,4,1,0,0,8,8,7,9,8,7,3,7,5,2,8,3,5,4,5,0,9,1,7,2,6,8,0,8,7,8,4,1,9,6,3,9,5,3,8,5,2,3,4,7,5,2,0,3,6,8,5,8,9,3,0,6,3,1,6,0,1,0,1,2,7,5,1,4,8,1,1,2,6,7,0,2,9,0,7,8,0,2,8,2,7,8,0,0,1,6,0,2,8,4,4,7,1,7,1,1,0,4,3,7,1,3,1,3,6,8,1,8,0,9,0,8,9,0,0,3,6,1,5,5,7,2,2,8,1,6,9,4,0,2,1,4,8,2,7,6,2,0,4,2,1,5,2,0,7,3,3,4,6,1,1,3,5,5,1,8,1,2,2,4,6,5,0,6,7,7,2,9,9,9,4,0,6,8,0,3,3,6,9,1,9,2,4,4,8,7,4,1,1,7,7,8,2,7,4,2,6,9,3,5,0,9,7,6,0,8,1,3,6,1,5,5,5,1,1,5,1,5,7,2,4,6,2,9,6,9,3,4,8,8,2,8,8,9,6,8,7,7,3,5,0,8,0,6,2,3,1,3,1,0,7,5,7,0,6,5,9,9,9,9,8,1,9,8,1,5,6,0,4,1,6,5,2,8,3,4,2,4,9,3,7,6,0,4,8,7,1,9,8,0,8,6,2,9,6,5,4,2,5,1,6,3,6,8,2,9,4,6,5,3,9,2,1,1,8,0,8,9,9,7,2,0,5,6,9,2,1,6,6,8,7,2,2,5,2,6,6,6,2,1,9,3,6,3,4,6,3,5,6,4,2,0,6,9,6,8,1,7,4,0,5,1,4,9,6,7,5,4,3,7,5,5,2,3,8,7,0,3,2,8,9,6,8,6,5,4,4,9,3,0,9,0,1,3,0,9,0,5,3,6,5,0,1,7,6,9,6,6,2,8,6,1,4,6,9,2};
		long t1 = System.currentTimeMillis();
    	System.out.println(new SuperPow().superPow(a, b));
    	System.out.println(System.currentTimeMillis() - t1);
	}
}
